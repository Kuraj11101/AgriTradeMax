Deployment ID: AKfycbwpEdeZlA7YGaI3G3ZfSYcywRaIOOLlTk7yd6Py49K4ji5RTzpKivZFRfUKmfu6yKu4
DID: AKfycbw0bYt2ePT5OelirFwkkWq6b5Om_yiRWi4kFdhRNE2ywfxgdCFuR2-7SRvULuZpDZx5
Web App: https://script.google.com/macros/s/AKfycbwpEdeZlA7YGaI3G3ZfSYcywRaIOOLlTk7yd6Py49K4ji5RTzpKivZFRfUKmfu6yKu4/exec
WEBAPP: https://script.google.com/macros/s/AKfycbw0bYt2ePT5OelirFwkkWq6b5Om_yiRWi4kFdhRNE2ywfxgdCFuR2-7SRvULuZpDZx5/exec








import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';
import { ContactService } from '../../../service/contact.service';

@Component({
  selector: 'app-contact',
  templateUrl: './contact.component.html',
  styleUrls: ['./contact.component.scss']
})
export class ContactComponent implements OnInit {
  form: FormGroup;

  fullname: FormControl = new FormControl("", [Validators.required]);
  email: FormControl = new FormControl("", [Validators.required, Validators.email]);
  message: FormControl = new FormControl("", [Validators.required, Validators.maxLength(256)]);
  honeypot: FormControl = new FormControl(""); // we will use this to prevent spam
  submitted: boolean = false; // show and hide the success message
  isLoading: boolean = false; // disable the submit button if we're loading
  responseMessage: string; // the response message to show to the user

  constructor(private builder: FormBuilder, private contact: ContactService) {
    this.form = this.FormBuilder.group({
      fullname: this.fullname,
      email: this.email,
      message: this.message,
      honeypot: this.honeypot
  });
}

  ngOnInit(): void {
    // this.FormData = new FormGroup({
    //   Fullname: new FormControl('', [Validators.required]),
    //   Email: new FormControl('', [Validators.required, Validators.email]),
    //   Message: new FormControl('', [Validators.required])
  }

}

//  if (this.form.status == "VALID" && this.honeypot.value == "") {
  this.form.disable(); // disable the form if it's valid to disable multiple submissions
  var formData: any = new FormData();
  formData.append("name", this.form.get("name").value);
  formData.append("email", this.form.get("email").value);
  formData.append("message", this.form.get("message").value);
  this.isLoading = true; // sending the post request async so it's in progress
  this.submitted = false; // hide the response message on multiple submits
  this.http.post("YOUR GOOGLE WEB APP URL HERE", formData).subscribe(
    (response) => {
      // choose the response message
      if (response["result"] == "success") {
        this.responseMessage = "Thanks for the message! I'll get back to you soon!";
      } else {
        this.responseMessage = "Oops! Something went wrong... Reload the page and try again.";
      }
      this.form.enable(); // re enable the form after a success
      this.submitted = true; // show the response message
      this.isLoading = false; // re enable the submit button
      console.log(response);
    },
    (error) => {
      this.responseMessage = "Oops! An error occurred... Reload the page and try again.";
      this.form.enable(); // re enable the form after a success
      this.submitted = true; // show the response message
      this.isLoading = false; // re enable the submit button
      console.log(error);

    }
    );
  }
}
}